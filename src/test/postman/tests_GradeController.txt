Postman queries:

GradeController
-getAssignmentGrades(...)
http://localhost:8080/assignments/{assignmentId}/grades

create records to test for multiple grades in assignment
select * from assignment;
select * from user_table;
insert into user_table (name, email, password, type)
values ('homer simpson', 'hsimpson@csumb.edu', '', 'STUDENT')
select * from enrollment;
insert into enrollment (grade, section_no, user_id)
values (null, 8, 7003);
select * from grade;
insert into grade (enrollment_id, assignment_id, score)
values (10000, 1, null);

http://localhost:8080/assignments/1/grades
http://localhost:8080/assignments/2/grades

Test bad parameters, assignmentId=3
message returned for assignment not found http://localhost:8080/assignments/3/grades

-updateGrades(...)
http://localhost:8080/grades

get grades and put into dlist format
http://localhost:8080/assignments/1/grades
http://localhost:8080/assignments/2/grades

[
    {
        "gradeId": 1,
        "studentName": "thomas edison",
        "studentEmail": "tedison@csumb.edu",
        "assignmentTitle": "db homework 1",
        "courseId": "cst363",
        "sectionId": 8,
        "score": 95
    },
    {
        "gradeId": 12000,
        "studentName": "thomas edison",
        "studentEmail": "tedison@csumb.edu",
        "assignmentTitle": "db homework 2",
        "courseId": "cst363",
        "sectionId": 8,
        "score": null
    }
]

update second grade score from null to 90
[
    {
        "gradeId": 1,
        "studentName": "thomas edison",
        "studentEmail": "tedison@csumb.edu",
        "assignmentTitle": "db homework 1",
        "courseId": "cst363",
        "sectionId": 8,
        "score": 95
    },
    {
        "gradeId": 12000,
        "studentName": "thomas edison",
        "studentEmail": "tedison@csumb.edu",
        "assignmentTitle": "db homework 2",
        "courseId": "cst363",
        "sectionId": 8,
        "score": 90
    }
]

verify grades
http://localhost:8080/assignments/1/grades
http://localhost:8080/assignments/2/grades

Test bad parameters: gradeId and score
message returned when gradeId not found

not required: validate score < 0, > 100 or non-integer



